@model PresentationLayer.ViewModels.ExamViewModel.CreateAutoExamViewModel
@{
    ViewData["Title"] = "Create Auto Exam";
}

<h2 class="text-center mb-4">Create Auto Exam</h2>

<form asp-action="PreviewExam" method="post">
    <div class="row">
        <!-- Exam Details Card -->
        <div class="col-md-6">
            <div class="card mb-3">
                <div class="card-header fw-bold bg-primary text-white">تفاصيل الامتحان</div>
                <div class="card-body">
                    <div class="mb-3">
                        <label asp-for="CourseNamee" class="form-label fw-bold">المادة</label>
                        <input asp-for="CourseNamee" class="form-control shadow-sm" />
                        <span asp-validation-for="CourseNamee" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="TeacherName" class="form-label fw-bold">اسم مدرس المادة</label>
                        <input asp-for="TeacherName" class="form-control shadow-sm" />
                        <span asp-validation-for="TeacherName" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Semester" class="form-label fw-bold">الفصل الدراسي</label>
                        <select asp-for="Semester" class="form-select shadow-sm">
                            <option value="">-- اختر الفصل الدراسي --</option>
                            <option value="الأول 2025/2026">الأول 2025/2026</option>
                            <option value="الثاني 2025/2026">الثاني 2025/2026</option>
                            <option value="الأول 2026/2027">الأول 2026/2027</option>
                            <option value="الثاني 2026/2027">الثاني 2026/2027</option>
                        </select>
                        <span asp-validation-for="Semester" class="text-danger"></span>
                    </div>

                </div>
            </div>
        </div>

        <!-- Category, Course, Exam Title -->
        <div class="col-md-6">
            <div class="card mb-3">
                <div class="card-header fw-bold bg-primary text-white">Course Selection</div>
                <div class="card-body">
                    <div class="mb-3">
                        <label asp-for="ExamTitle" class="form-label fw-bold">Exam Title</label>
                        <input asp-for="ExamTitle" class="form-control shadow-sm" />
                        <span asp-validation-for="ExamTitle" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Category</label>
                        <select asp-for="SelectedCategoryId" asp-items="Model.Categories" class="form-select shadow-sm" id="category">
                            <option value="" disabled selected>-- Select Category --</option>
                        </select>
                        <span asp-validation-for="SelectedCategoryId" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Course</label>
                        <select asp-for="SelectedCourseId" asp-items="Model.Courses" class="form-select shadow-sm" id="course">
                            <option value="" disabled selected>-- Select Course --</option>
                        </select>
                        <input type="hidden" asp-for="courseName" id="SelectedCourseName" />
                        <span asp-validation-for="SelectedCourseId" class="text-danger"></span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Lectures Section -->
    <div class="card mb-3">
        <div class="card-header fw-bold bg-primary text-white">Select Lectures</div>
        <div class="card-body">
            <div class="mb-3">
                <label class="form-label fw-bold">Lectures</label>
                <div class="border rounded p-3 bg-light" style="max-height: 200px; overflow-y: auto;" id="lecture-checkboxes">

                    <!-- All Lectures -->
                    <div class="form-check mb-2">
                        <input class="form-check-input" type="checkbox" id="selectAllLectures" />
                        <label class="form-check-label fw-bold" for="selectAllLectures">All Lectures</label>
                    </div>

                    <!-- Lecture Grid -->
                    @if (Model.Lectures != null && Model.Lectures.Any())
                    {
                        <div class="d-flex flex-wrap gap-3">
                            @foreach (var lecture in Model.Lectures)
                            {
                                <div class="form-check me-3">
                                    <input class="form-check-input lecture-checkbox" type="checkbox" name="SelectedLectureIds" value="@lecture.Value" id="lecture_@lecture.Value" />
                                    <label class="form-check-label" for="lecture_@lecture.Value">@lecture.Text</label>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-muted">No lectures available for this course.</div>
                    }
                </div>
            </div>
        </div>
    </div>



@*     ////////////////////////// *@
    <div class="card mb-3 shadow-sm">
        <div class="card-header fw-bold bg-primary text-white text-center">
            Question Distribution
        </div>
        <div class="card-body">
            <div class="row g-3">
                <!-- MCQ Card -->
                <div class="col-md-6">
                    <div class="card shadow-sm rounded border">
                        <div class="card-header bg-white text-center fw-bold border-bottom">
                            <i class="bi bi-list-check me-2"></i> Multiple Choice
                        </div>
                        <div class="card-body p-3">
                            <div class="mb-3">
                                <label class="form-label fw-semibold text-center d-block">Total Questions</label>
                                <input asp-for="TotalMcq" type="number" min="0" class="form-control text-center" />
                            </div>
                            <div class="d-flex gap-3 justify-content-center">
                                <div class="flex-fill">
                                    <label class="form-label text-success fw-semibold text-center d-block">Easy</label>
                                    <input asp-for="McqEasy" type="number" min="0" class="form-control text-center" />
                                </div>
                                <div class="flex-fill">
                                    <label class="form-label text-warning fw-semibold text-center d-block">Medium</label>
                                    <input asp-for="McqMedium" type="number" min="0" class="form-control text-center" />
                                </div>
                                <div class="flex-fill">
                                    <label class="form-label fw-semibold text-center d-block" style="color: #dc3545;">Hard</label>
                                    <input asp-for="McqHard" type="number" min="0" class="form-control text-center" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- True/False Card -->
                <div class="col-md-6">
                    <div class="card shadow-sm rounded border">
                        <div class="card-header bg-white text-center fw-bold border-bottom">
                            <i class="bi bi-toggle-on me-2"></i> True/False
                        </div>
                        <div class="card-body p-3">
                            <div class="mb-3">
                                <label class="form-label fw-semibold text-center d-block">Total Questions</label>
                                <input asp-for="TotalTf" type="number" min="0" class="form-control text-center" />
                            </div>
                            <div class="d-flex gap-3 justify-content-center">
                                <div class="flex-fill">
                                    <label class="form-label text-success fw-semibold text-center d-block">Easy</label>
                                    <input asp-for="TfEasy" type="number" min="0" class="form-control text-center" />
                                </div>
                                <div class="flex-fill">
                                    <label class="form-label text-warning fw-semibold text-center d-block">Medium</label>
                                    <input asp-for="TfMedium" type="number" min="0" class="form-control text-center" />
                                </div>
                                <div class="flex-fill">
                                    <label class="form-label fw-semibold text-center d-block" style="color: #dc3545;">Hard</label>
                                    <input asp-for="TfHard" type="number" min="0" class="form-control text-center" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>



@* //////////////////////// *@
   @*  <div class="card mb-3">
        <div class="card-header fw-bold bg-primary text-white">Exam Configuration</div>
        <div class="card-body">
            <div class="row">
                <!-- Total Questions -->
                <div class="col-md-6">
                    <h6 class="fw-bold">Total Questions</h6>
                    <div class="mb-2">
                        <input asp-for="TotalQuestions" id="totalQuestions" class="form-control" type="number" min="1" step="1" />
                    </div>
                </div>
            </div>
        </div>
    </div>
 *@

    <button type="button" class="btn btn-primary w-100" id="filterQuestionsBtn">Filter Questions</button>
    <div id="errorMessage" class="alert alert-danger d-none text-center mt-3"></div>

    <hr />
    @* @if (Model.Questions != null && Model.Questions.Any())
    { *@
    <div class="card mt-4 mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0 text-center">Available Questions</h5>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-bordered table-hover table-sm mb-0">
                    <thead>
                        <tr>
                            <th style="width: 5%;">Select</th>
                            <th style="width: 61%;">Question Text</th>
                            <th style="width: 10%;">Type</th>
                            <th style="width: 8%;">Difficulty</th>
                            <th style="width: 8%;">Lecture</th>
                            <th style="width: 8%;">Points</th>
                        </tr>
                    </thead>
                    <tbody id="questionsTableBody">
                        @await Html.PartialAsync("_GeneratedQuestionsPartial", Model.Questions)
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    @* } *@
    <!-- Summary Section -->
    <div class="card mt-4">
        <div class="card-header bg-light fw-bold">Selected Questions Summary</div>
        <div class="card-body">
            <div id="summaryList"></div>

            <div>
                <strong>Total Questions:</strong> <span id="totalQuestions">0</span> |
                <strong>Total Points:</strong> <span id="totalPoints">0</span>
            </div>
        </div>
    </div>
   
    <!-- Submit Button -->
    <div class="text-end mt-3">
        <a class="btn btn-secondary" href="#">Cancel</a>
      @*   <button type="submit" class="btn btn-primary">Preview</button> *@
        <button type="submit" class="btn btn-primary" id="previewButton">Preview</button>

    </div>

    <div id="hiddenInputsContainer"></div>
    
    <!-- Confirmation Modal -->
    <div class="modal fade" id="noQuestionModal" tabindex="-1" aria-labelledby="noQuestionModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-danger">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="noQuestionModalLabel">Warning</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center">
                    <i class="bi bi-exclamation-triangle-fill fs-3 text-danger"></i>
                    <p class="mt-3">Please select at least one question before previewing the exam.</p>
                </div>
                <div class="modal-footer justify-content-center">
                    <button type="button" class="btn btn-outline-danger" data-bs-dismiss="modal">OK</button>
                </div>
            </div>
        </div>
    </div>

</form>

@section Scripts {
    
    <script>
        $(document).ready(function () {
            // Bind Select All checkboxes
            bindSelectAllCheckbox("selectAllLectures", "lecture-checkbox");

            // Category change handler
            $('#category').change(function () {
                var categoryId = $(this).val();
                if (categoryId) {
                    getCoursesByCategory(categoryId);
                } else {
                    $('#course').empty().append('<option value="">-- Select Course --</option>');
                    $('#lecture-checkboxes').empty();
                }
            });

            // Course change handler
            $('#course').change(function () {
                var courseId = $(this).val();
                if (courseId) {
                    getLecturesByCourse(courseId);
                } else {
                    $('#lecture-checkboxes').empty();
                }
            });
        });

        function bindSelectAllCheckbox(selectAllId, checkboxClass) {
            $('#' + selectAllId).off('change').on('change', function () {
                $('.' + checkboxClass).prop('checked', this.checked);
            });
        }

        function getCoursesByCategory(categoryId) {
            $.ajax({
                url: '/Professor/GetCoursesByyCategory',
                type: 'GET',
                data: { categoryId: categoryId },
                beforeSend: function () {
                    $('#course').prop('disabled', true);
                },
                success: function (data) {
                    var courseDropdown = $('#course');
                    courseDropdown.empty().append('<option value="" disabled selected>-- Select Course --</option>');

                    if (data && data.length > 0) {
                        $.each(data, function (i, course) {
                            courseDropdown.append($('<option>', {
                                value: course.id,
                                text: course.name
                            }));
                        });
                    }
                },
                complete: function () {
                    $('#course').prop('disabled', false);
                },
                error: function () {
                    alert('Error loading courses. Please try again.');
                }
            });
        }
        function getLecturesByCourse(courseId) {
            $.ajax({
                url: '/Professor/GetLecturesByCourse',
                type: 'GET',
                data: { courseId: courseId },
                beforeSend: function () {
                    $('#lecture-checkboxes').html('<div class="text-center py-3"><div class="spinner-border text-primary" role="status"></div></div>');
                },
                success: function (data) {
                    var container = $('#lecture-checkboxes');
                    container.empty();

                    if (data && data.length > 0) {
                        // Add the "All Lectures" checkbox
                        container.append(`
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" id="selectAllLectures" />
                                <label class="form-check-label fw-bold" for="selectAllLectures">All Lectures</label>
                            </div>
                        `);

                        // Sort lectures by number in name
                        data.sort(function (a, b) {
                            const numA = parseInt(a.lectureName.match(/\d+/));
                            const numB = parseInt(b.lectureName.match(/\d+/));
                            return numA - numB;
                        });

                        // Create a flex container for lecture checkboxes
                        const flexWrapper = $('<div class="d-flex flex-wrap gap-3"></div>');

                        // Add each lecture checkbox to the flex container
                        $.each(data, function (i, lecture) {
                            flexWrapper.append(`
                                <div class="form-check me-3">
                                    <input class="form-check-input lecture-checkbox" type="checkbox" name="SelectedLectureIds" value="${lecture.id}" id="lecture_${lecture.id}" />
                                    <label class="form-check-label" for="lecture_${lecture.id}">${lecture.lectureName}</label>
                                </div>
                            `);
                        });

                        // Append the flex container to the main lecture area
                        container.append(flexWrapper);

                        // Re-bind the select all logic
                        bindSelectAllCheckbox("selectAllLectures", "lecture-checkbox");
                    } else {
                        container.append('<div class="text-muted">No lectures available for this course.</div>');
                    }
                },
                error: function () {
                    alert('Error loading lectures. Please try again.');
                }
            });
        }

        /////////////////////
    //    function adjustQuestionType(changedType, newValue) {
    //     newValue = parseInt(newValue);
    //     let mcq = parseInt(document.getElementById('mcqRange').value);
    //     let tf = parseInt(document.getElementById('tfRange').value);

    //     if (changedType === 'mcq') {
    //         mcq = newValue;
    //         tf = 100 - mcq;
    //     } else if (changedType === 'tf') {
    //         tf = newValue;
    //         mcq = 100 - tf;
    //     }

    //     // Round to nearest 5 to match step size
    //     mcq = Math.round(mcq / 5) * 5;
    //     tf = Math.round(tf / 5) * 5;

    //     // Ensure values stay within bounds
    //     mcq = Math.max(0, Math.min(100, mcq));
    //     tf = Math.max(0, Math.min(100, tf));

    //     // Update both sliders and displays
    //     document.getElementById('mcqRange').value = mcq;
    //     document.getElementById('tfRange').value = tf;
    //     document.getElementById('mcqValue').textContent = mcq;
    //     document.getElementById('tfValue').textContent = tf;
    // }

    // function adjustDifficulty(changed, newValue) {
    //     newValue = parseInt(newValue);
    //     let easy = parseInt(document.getElementById('easyRange').value);
    //     let medium = parseInt(document.getElementById('mediumRange').value);
    //     let hard = parseInt(document.getElementById('hardRange').value);

    //     if (changed === 'easy') {
    //         easy = newValue;
    //         const remaining = 100 - easy;
    //         const oldTotal = medium + hard || 1; // Avoid division by zero
    //         medium = Math.round((medium / oldTotal) * remaining / 5) * 5;
    //         hard = remaining - medium;
    //     } else if (changed === 'medium') {
    //         medium = newValue;
    //         const remaining = 100 - medium;
    //         const oldTotal = easy + hard || 1;
    //         easy = Math.round((easy / oldTotal) * remaining / 5) * 5;
    //         hard = remaining - easy;
    //     } else if (changed === 'hard') {
    //         hard = newValue;
    //         const remaining = 100 - hard;
    //         const oldTotal = easy + medium || 1;
    //         easy = Math.round((easy / oldTotal) * remaining / 5) * 5;
    //         medium = remaining - easy;
    //     }

    //     // Round to nearest 5 to match step size
    //     easy = Math.round(easy / 5) * 5;
    //     medium = Math.round(medium / 5) * 5;
    //     hard = 100 - easy - medium;

    //     // Ensure values stay within bounds
    //     easy = Math.max(0, Math.min(100, easy));
    //     medium = Math.max(0, Math.min(100, medium));
    //     hard = Math.max(0, Math.min(100, hard));

    //     // Update all difficulty controls
    //     document.getElementById('easyRange').value = easy;
    //     document.getElementById('mediumRange').value = medium;
    //     document.getElementById('hardRange').value = hard;
    //     document.getElementById('easyValue').textContent = easy;
    //     document.getElementById('mediumValue').textContent = medium;
    //     document.getElementById('hardValue').textContent = hard;
    // }

    // // Initialize on load with default values
    // window.addEventListener("DOMContentLoaded", function () {
    //     // Set initial values
    //     document.getElementById('easyRange').value = 40;
    //     document.getElementById('mediumRange').value = 40;
    //     document.getElementById('hardRange').value = 20;
    //     document.getElementById('mcqRange').value = 60;
    //     document.getElementById('tfRange').value = 40;
        
    //     // Update displays
    //     document.getElementById('easyValue').textContent = 40;
    //     document.getElementById('mediumValue').textContent = 40;
    //     document.getElementById('hardValue').textContent = 20;
    //     document.getElementById('mcqValue').textContent = 60;
    //     document.getElementById('tfValue').textContent = 40;
    // });
    ////////////////////////
        // $(document).ready(function () {
        //     $("#filterQuestionsBtn").click(function () {
        //         var selectedLectures = $(".lecture-checkbox:checked").map(function () { return parseInt($(this).val()); }).get();
        //         var selectedCategoryId = parseInt($("#category").val()) || null;
        //         var selectedCourseId = parseInt($("#course").val()) || null;
        //         var totalQuestions = parseInt($("#totalQuestions").val()) || 10; // Default to 10

        //         // Get percentage values from sliders
        //         var easyPercentage = parseInt($("#easyRange").val()) || 40;
        //         var mediumPercentage = parseInt($("#mediumRange").val()) || 40;
        //         var hardPercentage = parseInt($("#hardRange").val()) || 20;
        //         var mcqPercentage = parseInt($("#mcqRange").val()) || 60;
        //         var tfPercentage = parseInt($("#tfRange").val()) || 40;

        //         console.log({
        //             selectedCategoryId,
        //             selectedCourseId,
        //             selectedLectureIds: selectedLectures,
        //             totalQuestions,
        //             easyPercentage,
        //             mediumPercentage,
        //             hardPercentage,
        //             mcqPercentage,
        //             tfPercentage
        //         }); // Debugging

        //         $.ajax({
        //             url: "/Professor/CreateAutoExam",
        //             type: "GET",
        //             traditional: true,
        //             data: {
        //                 selectedCategoryId: selectedCategoryId,
        //                 selectedCourseId: selectedCourseId,
        //                 selectedLectureIds: selectedLectures.length ? selectedLectures : [],
        //                 totalQuestions: totalQuestions,
        //                 easyPercentage: easyPercentage,
        //                 mediumPercentage: mediumPercentage,
        //                 hardPercentage: hardPercentage,
        //                 multipleChoicePercentage: mcqPercentage,   // FIXED
        //                 trueFalsePercentage: tfPercentage,         // FIXED
        //                 isAjaxRequest: true
        //             },

        //             success: function (response) {
        //                 console.log("AJAX Response:", response); // Debugging
        //                 $("#questionsTableBody").html(response);
        //             },
        //             error: function () {
        //                 alert("An error occurred while generating exam questions.");
        //             }
        //         }); 
        //     });

        //     // Set initial course name if already selected
        //     $('#SelectedCourseName').val($('#course option:selected').text());

        //     // Update on change
        //     $('#course').change(function () {
        //         var courseName = $('#course option:selected').text();
        //         $('#SelectedCourseName').val(courseName);
        //     });
        // });
        /////////////////////////////////////////////
        function setupAutoTotal(group) {
            const totalInput = document.querySelector(`[name="${group}.Total"]`) || document.querySelector(`[name="Total${group}"]`);
            const easyInput = document.querySelector(`[name="${group}.Easy"]`) || document.querySelector(`[name="${group}Easy"]`);
            const mediumInput = document.querySelector(`[name="${group}.Medium"]`) || document.querySelector(`[name="${group}Medium"]`);
            const hardInput = document.querySelector(`[name="${group}.Hard"]`) || document.querySelector(`[name="${group}Hard"]`);

            const inputs = [easyInput, mediumInput, hardInput];

            // Update total when any difficulty input changes
            inputs.forEach(input => {
                input.addEventListener('input', () => {
                    const sum = (parseInt(easyInput.value) || 0) +
                        (parseInt(mediumInput.value) || 0) +
                        (parseInt(hardInput.value) || 0);
                    totalInput.value = sum;
                });
            });

            // Update difficulties equally when total is changed manually
            totalInput.addEventListener('input', () => {
                const total = parseInt(totalInput.value) || 0;
                const base = Math.floor(total / 3);
                const remainder = total % 3;

                easyInput.value = base;
                mediumInput.value = base + (remainder > 0 ? 1 : 0);
                hardInput.value = base + (remainder > 1 ? 1 : 0);
            });
        }

        document.addEventListener('DOMContentLoaded', function () {
            setupAutoTotal("Mcq");
            setupAutoTotal("Tf");
        });
        /////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////
        $(document).ready(function () {
            $("#filterQuestionsBtn").click(function () {
                console.log("Filter button clicked, starting validation...");

                // Clear previous validation messages
                $(".text-danger").text("");
                $("#errorMessage").addClass("d-none").text("");

                // Read values
                var selectedCategoryId = parseInt($("#category").val()) || null;
                var selectedCourseId = parseInt($("#course").val()) || null;
                var totalMcq = parseInt($("input[name='TotalMcq']").val()) || 0;
                var totalTf = parseInt($("input[name='TotalTf']").val()) || 0;
                var isValid = true;

                // Validate Category
                if (!selectedCategoryId) {
                    $("#category").siblings(".text-danger").text("Category is required.");
                    isValid = false;
                }

                // Validate Course
                if (!selectedCourseId) {
                    $("#course").siblings(".text-danger").text("Course is required.");
                    isValid = false;
                }

                // Validate at least one lecture selected
                var selectedLectures = $(".lecture-checkbox:checked").map(function () {
                    return parseInt($(this).val());
                }).get();

                if (selectedLectures.length === 0) {
                    $("#errorMessage").html("⛔ Please select at least one lecture.")
                        .removeClass("d-none")
                        .fadeIn();
                    isValid = false;
                }

                // Validate if both question types are 0
                if (totalMcq === 0 && totalTf === 0) {
                    $("#errorMessage").html("⛔ Oops! Looks like both Multiple Choice and True/False counts are missing. Please enter at least one!")
                        .removeClass("d-none")
                        .fadeIn();
                    isValid = false;
                }

                // Stop if validation fails
                if (!isValid) return;

                // Get difficulty-level counts
                var mcqEasy = parseInt($("input[name='McqEasy']").val()) || 0;
                var mcqMedium = parseInt($("input[name='McqMedium']").val()) || 0;
                var mcqHard = parseInt($("input[name='McqHard']").val()) || 0;

                var tfEasy = parseInt($("input[name='TfEasy']").val()) || 0;
                var tfMedium = parseInt($("input[name='TfMedium']").val()) || 0;
                var tfHard = parseInt($("input[name='TfHard']").val()) || 0;

                var requestData = {
                    selectedCategoryId: selectedCategoryId,
                    selectedCourseId: selectedCourseId,
                    selectedLectureIds: selectedLectures,
                    totalMcq: totalMcq,
                    mcqEasy: mcqEasy,
                    mcqMedium: mcqMedium,
                    mcqHard: mcqHard,
                    totalTf: totalTf,
                    tfEasy: tfEasy,
                    tfMedium: tfMedium,
                    tfHard: tfHard,
                    isAjaxRequest: true
                };

                console.log("Sending AJAX Request with data:", requestData);

                $.ajax({
                    url: "/Professor/CreateAutoExam",
                    type: "GET",
                    traditional: true,
                    data: requestData,
                    success: function (response) {
                        console.log("AJAX Response:", response);
                        $("#questionsTableBody").html(response);
                    },
                    error: function (xhr, status, error) {
                        console.error("AJAX Error:", status, error);
                        console.error("Response Text:", xhr.responseText);
                        alert("Failed to fetch questions. Please try again.");
                    }
                });
            });
        });



        ///////
        function updateSummary() {
            const summaryList = document.getElementById("summaryList");
            const hiddenInputsContainer = document.getElementById("hiddenInputsContainer");
            const checkboxes = document.querySelectorAll(".question-select");
            let totalQuestions = 0;
            let totalPoints = 0.0;
            summaryList.innerHTML = "";
            hiddenInputsContainer.innerHTML = ""; // Clear previous inputs

            checkboxes.forEach((cb, index) => {
                const isChecked = cb.checked;
                const questionText = cb.dataset.text;
                const type = cb.dataset.type;
                const difficulty = cb.dataset.difficulty;
                const idx = cb.dataset.index;
                const lecture = cb.dataset.lecture;
                const questionId = cb.value;
                const pointsInput = document.querySelector(`.points-input[data-index='${idx}']`);
                const points = parseFloat(pointsInput?.value || "0");

                if (isChecked) {
                    totalQuestions++;
                    totalPoints += points;

                    // Summary UI
                    summaryList.innerHTML += `
                  <div class="d-flex justify-content-between align-items-center mb-2" id="summary-${idx}">
                    <div>
                      <strong>Q${totalQuestions}:</strong> ${questionText}<br>
                      <small>${type} | ${difficulty} | ${lecture} | ${points} pts</small>
                    </div>
                    <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeQuestion(${idx})">Remove</button>
                  </div>
                `;



                    // Hidden inputs
                    hiddenInputsContainer.innerHTML += `
                                <input type="hidden" name="SelectedQuestions[${totalQuestions - 1}].QuestionId" value="${questionId}" />
                                <input type="hidden" name="SelectedQuestions[${totalQuestions - 1}].QuestionText" value="${questionText}" />
                                <input type="hidden" name="SelectedQuestions[${totalQuestions - 1}].QuestionTypeName" value="${type}" />
                                <input type="hidden" name="SelectedQuestions[${totalQuestions - 1}].DifficultyLevelName" value="${difficulty}" />
                                <input type="hidden" name="SelectedQuestions[${totalQuestions - 1}].LectureName" value="${lecture}" />
                                <input type="hidden" name="SelectedQuestions[${totalQuestions - 1}].Points" value="${points}" />
                            `;
                }
            });

            document.getElementById("totalQuestions").innerText = totalQuestions;
            document.getElementById("totalPoints").innerText = totalPoints.toFixed(1);
        }




        function removeQuestion(index) {
            const checkbox = document.querySelector(`.question-select[data-index='${index}']`);
            const pointsInput = document.querySelector(`.points-input[data-index='${index}']`);
            if (checkbox) checkbox.checked = false;
            if (pointsInput) pointsInput.value = "";
            updateSummary();
        }

        document.addEventListener("DOMContentLoaded", () => {
            document.querySelectorAll(".question-select, .points-input").forEach(el =>
                el.addEventListener("change", updateSummary));
        });
        document.addEventListener("change", function (e) {
            if (e.target.classList.contains("question-select") || e.target.classList.contains("points-input")) {
                updateSummary();
            }
        });
        ///////
        $(document).ready(function () {
            $("form").submit(function (event) {
                let isValid = true;

                $(".question-select:checked").each(function () {
                    const questionId = $(this).data("index");
                    const pointInput = $(".points-input[data-index='" + questionId + "']");
                    const points = pointInput.val().trim();

                    if (!points || isNaN(points) || parseFloat(points) <= 0) {
                        isValid = false;
                        pointInput.addClass("is-invalid");
                    } else {
                        pointInput.removeClass("is-invalid");
                    }
                });

                if (!isValid) {
                    event.preventDefault(); // Prevent form submission
                }
            });

            $(document).on("input", ".points-input", function () {
                const value = $(this).val().trim();
                if (value !== "" && !isNaN(value) && parseFloat(value) > 0) {
                    $(this).removeClass("is-invalid");
                }
            });

        });
        //////////////
        $(document).ready(function () {
            // Set initial course name if already selected
            $('#SelectedCourseName').val($('#course option:selected').text());

            // Update on change
            $('#course').change(function () {
                var courseName = $('#course option:selected').text();
                $('#SelectedCourseName').val(courseName);
            });
        });
        /////////////
        $(document).ready(function () {
            $('#previewButton').on('click', function (e) {
                var selectedQuestions = $('input[name="SelectedQuestionIds"]:checked');

                if (selectedQuestions.length === 0) {
                    e.preventDefault(); // Prevent form submission
                    var noQuestionModal = new bootstrap.Modal(document.getElementById('noQuestionModal'));
                    noQuestionModal.show();
                }
            });
        });








    </script>
}

